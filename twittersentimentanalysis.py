# -*- coding: utf-8 -*-
"""Copy of TwitterSentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PbF3u5ZzdGluXvrVPTAj-4cAgvOaafnY

# OleTwitterSentimentAnalysis

Analisis sentimen mengenai tweet yang berisi keyword 'ole', pasca kekalahan Manchester United di laga pembuka fase grup Champions League 2021/22.

## Install and Import Libraries
"""

!pip install textblob --upgrade --quiet

# import libraries
from textblob import TextBlob
import tweepy
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import re

from wordcloud import WordCloud, STOPWORDS
from PIL import Image

tweepy.__version__

"""## Authentication"""

# authentication
api_key = input('Input your Twitter API Key: ')
api_key_secret = input('Input your Twitter API Secret Key: ')

access_token = input('Input your Access Token: ')
access_token_key = input('Input your Access Token Secret: ')

auth = tweepy.OAuthHandler(api_key, api_key_secret)
auth.set_access_token(access_token, access_token_key)
api = tweepy.API(auth)

"""## Getting Tweets with Keywords or Hashtag

Mendapatkan Tweet dari Twitter dengan keyword 'harry maguire' sebanyak 500 Tweet
"""

q = "harry maguire"
num_tweets = 500

tweets = tweepy.Cursor(api.search, q=q, lang='en').items(num_tweets)

"""Membuat dataframe dengan data berisi Tweet yang sudah diambil"""

df = pd.DataFrame(data=[tweet.text for tweet in tweets], columns=['Tweets'])

df

"""## Cleaning Data

Membersihkan Tweet dari karakter-karakter yang tidak diperlukan. Seperti RT, @, url (https://), #, dan karakter new line.
"""

def cleaner(tweet):
  tweet = re.sub(r'RT ', '', tweet) # remove RT
  tweet = re.sub(r'@[A-Za-z0-9_:]+|@[_A-Za-z0-9:]+', '', tweet) # remove mentions
  tweet = re.sub(r'#', '', tweet) # remove hashtags
  tweet = re.sub(r'https?:\/\/[A-Za-z0-9\.\/]+', '', tweet) # remove urls
  tweet = re.sub(r'\n', '', tweet)
  return tweet.strip()

df['Tweets'] = df['Tweets'].apply(cleaner)

df.head(10)

df.info()

"""## Numbers

Mendapatkan nilai subjectivity dan polarity dari suatu Tweet.<br>
> **Polarity** merupakan nilai yang berkisar [-1, 1], yang juga menjadi tolak ukur apakah suatu pernyataan memiliki sentimen positif, negatif atau netral. Nilai > 0 menandakan pernyataan tersebut memiliki sentimen positif, nilai < 0 menandakan pernyataan tersebut memiliki sentimen negatif, nilai 0 bersifat netral.

> **Subjectivity** merupakan nilai yang berkisar [0, 1] yang menandakan suatu pernyataan bersifat subjektif (nilai mendekati 1) atau objektif (nilai mendekati 0).
"""

# get tweet's subjectivity score
def get_subjectivity(tweet):
  return TextBlob(tweet).sentiment.subjectivity

# get tweet's polarity score
def get_polarity(tweet):
  return TextBlob(tweet).sentiment.polarity

"""Membuat kolom `Polarity` dan `Subjectivity`."""

df['Polarity'] = df['Tweets'].apply(get_polarity)
df['Subjectivity'] = df['Tweets'].apply(get_subjectivity)

df

"""Mendapatkan hasil sentimen yang didasarkan pada nilai `Polarity` masing-masing Tweet."""

def get_sentiment(polarity):
  if polarity > 0:
    return 'Positive'
  elif polarity < 0:
    return 'Negative'
  return 'Neutral'

df['Sentiment'] = df['Polarity'].apply(get_sentiment)

df

"""Mengklasifikasikan Tweet berdasarkan sentimennya."""

df_positive = df[df['Sentiment'] == 'Positive']
df_negative = df[df['Sentiment'] == 'Negative']
df_neutral = df[df['Sentiment'] == 'Neutral']

"""Membuat persentase kemunculan masing-masing sentimen."""

pos_per = round(len(df_positive)/len(df), 1) * 100
neg_per = round(len(df_negative)/len(df), 1) * 100
neu_per = round(len(df_neutral)/len(df), 1) * 100

print(f'{len(df_positive)} ({pos_per}%) of positive tweets')
print(f'{len(df_negative)} ({neg_per}%) of negative tweets')
print(f'{len(df_neutral)} ({neu_per}%) of neutral tweets')

"""## Plotting

Membuat Diagram Lingkaran dan Diagram Scatter

> Diagram Lingkaran menampilkan persentase sentimen dari 500 Tweet dengan kata kunci "harry maguire".

> Diagram Scatter menampilkan titik antara nilai `Polarity` dan `Subjectivity` dari masing-masing Tweet.
"""

labels = ['Positive', 'Negative', 'Neutral']
sizes = [pos_per, neg_per, neu_per]

fig, ax = plt.subplots()
ax.pie(sizes, labels=labels, startangle=90, shadow=True, autopct='%1.1f%%')
ax.axis('equal')
plt.title("Hasil Analisis Sentimen pada Platform Twitter untuk Kata Kunci: "+q)

for index, row in df.iterrows():
  if row['Sentiment'] == 'Positive':
    plt.scatter(row['Polarity'], row['Subjectivity'], color='green')
  elif row['Sentiment'] == 'Negative':
    plt.scatter(row['Polarity'], row['Subjectivity'], color='red')
  elif row['Sentiment'] == 'Neutral':
    plt.scatter(row['Polarity'], row['Subjectivity'], color='blue')

plt.title('Twitter Sentiment Analysis: Ole')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.legend(['Positive', 'Negative', 'Neutral'])
plt.show()

"""## Create WordCloud

WordCloud dari keseluruhan Tweet yang diambil dari Twitter API.
"""

#Function to Create Wordcloud
def create_wordcloud(text):
  mask = np.array(Image.open("/content/WhatsApp Image 2022-06-28 at 12.41.36 PM.jpeg"))
  stopwords = set(STOPWORDS)
  wc = WordCloud(background_color="white",
  mask = mask,
  max_words=3000,
  stopwords=stopwords,
  repeat=True)
  wc.generate(str(text))
  wc.to_file("wc.png")
  print("Word Cloud Saved Successfully")
  path="wc.png"
  display(Image.open(path))

create_wordcloud(df['Tweets'].values)

